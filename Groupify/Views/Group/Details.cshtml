@using Microsoft.AspNetCore.DataProtection
@using Microsoft.CodeAnalysis.Scripting
@model Groupify.ViewModels.Group.DetailsGroupViewModel


@{
    ViewData["Title"] = "Group Details";
}

<div class="row text-center">
    <h2>
        Group @Model.Group.GroupNumber in room:
        <a asp-action="Details" asp-route-roomId="@Model.Group.RoomId">
            @Model.Group.Room.Name
        </a>
    </h2>
</div>

<div class="row">
    <div class="col-md-6">
        <h3 class="text-center">Members</h3>
        <ul>
            @foreach (var user in Model.Group.Users)
            {
                <li>@user.FirstName @user.LastName - Wheel position: @user.Insight?.WheelPosition</li>
            }
        </ul>
    </div>
    <div class="col-md-6">
        <h3 class="text-center">Average Group Insights</h3>
        <div class="mx-5">
            <canvas id="insightChart" width="400" height="400"></canvas>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Read the four components from the Razor model
        var data = [
            @Model.GroupInsight.X.ToString("F2", System.Globalization.CultureInfo.InvariantCulture),
            @Model.GroupInsight.Y.ToString("F2", System.Globalization.CultureInfo.InvariantCulture),
            @Model.GroupInsight.Z.ToString("F2", System.Globalization.CultureInfo.InvariantCulture),
            @Model.GroupInsight.W.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)
        ];


        // Compute percentages of max=6
        var percentages = data.map(function(v) {
            return Math.round((parseFloat(v) / 6) * 100) + '%';
        });
        
        var labels     = ['Blue', 'Green', 'Yellow', 'Red'];

        var ctx = document.getElementById('insightChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: [
                        'rgb(0, 105, 153)',
                        'rgb(51, 102, 51)',
                        'rgb(255, 204, 51)',
                        'rgb(204, 51, 51)'
                    ],
                    borderColor: [
                        'black',
                        'black',
                        'black',
                        'black'
                    ],
                    borderWidth: 2,
                    barPercentage: 1.0,
                    categoryPercentage: 1.0
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 6,
                        ticks: { stepSize: 3 },
                        grid: {
                            color: ctx => ctx.tick.value === 3 ? 'black' : 'transparent',
                            lineWidth: ctx => ctx.tick.value === 3 ? 3 : 0,
                            z: 1
                        }
                    },
                    x: {
                        barPercentage: 1.0,
                        categoryPercentage: 1.0,
                        grid: {
                            color: 'black',
                            lineWidth: 3,
                        },
                        
                        // multiline x‐axis labels: name on top, then value & percent beneath
                        ticks: {
                            callback: function(val, index) {
                                // return an array -> Chart.js will stack them
                                let v = data[index].toFixed(2);
                                let p = percentages[index];
                                return [ this.getLabelForValue(index), `${v} (${p})` ];
                            }
                        }
                    }
                },
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: ctx => {
                                let v = ctx.parsed.y.toFixed(2);
                                let p = percentages[ctx.dataIndex];
                                return ` ${v} (${p})`;
                            }
                        }
                    }
                }
            }
        });
    </script>
}
