@model Groupify.ViewModels.Room.CompositeRoomViewModel

@{
    ViewData["Title"] = "Room Details";
}

@* Flash messages from join *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["InfoMessage"] != null)
{
    <div class="alert alert-info">@TempData["InfoMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<style>
    .group-box {
        background: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: .5rem;
        box-shadow: 0 .25rem .5rem rgba(0,0,0,0.1);
        padding: 1rem;
        transition: box-shadow .3s ease, border-color .3s ease;
    }
    .group-box.drag-over {
        box-shadow: 0 .5rem 1rem rgba(33,150,243,0.4) !important;
        border-color: #2196f3 !important;
    }
    .group-box h4 {
        margin-bottom: .75rem;
        font-size: 1.25rem;
        color: #333;
        text-align: center;
    }
    .group-list {
        list-style: none;
        padding: 0;
        margin: 0;
        min-height: 100px;
    }
    .group-list li {
        background: #f8f9fa;
        margin-bottom: .5rem;
        padding: .5rem .75rem;
        border-radius: .25rem;
        cursor: grab;
        transition: background .2s ease;
        min-width: 10rem;
    }
    .group-list li:active {
        cursor: grabbing;
        background: #e2e6ea;
    }
</style>

<div class="row text-center">
    <div class="d-flex justify-content-center align-items-center">
        <div class="d-flex align-items-center">
            <h2 id="roomName" class="mb-0 cursor-pointer" onclick="toggleRoomNameEdit()">@Model.RoomDetails.Room.Name</h2>
            <input type="text" id="roomNameInput" class="h2-input d-none form-control-plaintext"
                   value="@Model.RoomDetails.Room.Name"
                   onblur="updateRoomName()"
                   onkeydown="if(event.key === 'Enter') this.blur();" />
            <button class="btn btn-link p-0 ms-2" onclick="toggleRoomNameEdit()">
                <i class="bi bi-pencil-fill text-dark"></i>
            </button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <partial name="_MembersList" model="@Model"/>
    </div>
    <div class="col-md-4">
        <h3 class="text-center">Create Groups</h3>
        <form id="createGroupsForm" onsubmit="createGroups(event)">
            <input type="hidden" name="CreateGroup.RoomId" value="@Model.RoomDetails.Room.Id" />
            <div class="form-group">
                <label for="groupSize">Group Size</label>
                <input name="CreateGroup.GroupSize" type="number" class="form-control" id="groupSize"/>
                <span class="text-danger" id="createGroupsError"></span>
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </form>
    </div>
    <div class="col-md-4">
        <h3 class="text-center">Groups</h3>
        <div class="row">
            @foreach (var group in Model.RoomDetails.Groups.OrderBy(g => g.GroupNumber))
            {
                <div class="group-box col m-2" data-group-id="@group.Id"
                     ondragover="event.preventDefault(); this.classList.add('drag-over');"
                     ondragleave="this.classList.remove('drag-over');"
                     ondrop="onUserDrop(event); this.classList.remove('drag-over');">
                    <h4>
                        <a asp-controller="Group" asp-action="Details" asp-route-id="@group.Id" class="text-decoration-none text-body">
                            Group @group.GroupNumber
                            <i class="bi bi-box-arrow-in-right ms-2"></i>
                        </a>
                    </h4>

                    <ul id="group-@group.Id" class="group-list">
                        @foreach (var user in group.Users.OrderBy(u => u.FirstName).ThenBy(u => u.LastName))
                        {
                            <li draggable="true"
                                data-user-id="@user.Id"
                                ondragstart="onUserDragStart(event)">
                                <i class="bi bi-person-fill me-2"></i>@user.FirstName @user.LastName
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

<div class="row justify-content-center mt-3 mb-3">
    <div class="col-auto">
        <button class="btn btn-danger" onclick="deleteRoom(event)">Delete</button>
    </div>
</div>

@section Scripts {
    <script>
        function toggleRoomNameEdit() {
            const displayElement = document.getElementById('roomName');
            const input = document.getElementById('roomNameInput');

            displayElement.classList.add('d-none');
            input.classList.remove('d-none');

            // Set initial width to match the display element
            input.style.width = displayElement.offsetWidth + 'px';
            input.value = displayElement.textContent.trim();
            input.focus();
        }

        function updateRoomName() {
            const input = document.getElementById('roomNameInput');
            const displayElement = document.getElementById('roomName');
            const newName = input.value.trim();

            if (newName === '') {
                displayElement.classList.remove('d-none');
                input.classList.add('d-none');
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const roomId = '@Model.RoomDetails.Room.Id';

            fetch('/Room/UpdateName', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `roomId=${roomId}&newName=${encodeURIComponent(newName)}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayElement.textContent = newName;
                        displayElement.classList.remove('d-none');
                        input.classList.add('d-none');
                    } else {
                        alert(data.message || 'Failed to update room name');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error updating room name');
                });
        }
        
        function createGroups(event) {
            event.preventDefault();

            const form = event.target;
            const errorSpan = document.getElementById('createGroupsError');
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Clear previous errors
            errorSpan.textContent = '';
            
            fetch('/group/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams(new FormData(form))
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        errorSpan.textContent = data.message || 'Failed to create groups';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    errorSpan.textContent = 'Error creating groups';
                });
        }
        
        function removeUser(roomId, userId, button) {
            if (!confirm('Are you sure you want to remove this user from the room?')) {
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/Room/RemoveUser`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `userId=${userId}&roomId=${roomId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.closest('li').remove();
                } else {
                    alert(data.message || 'Failed to remove user');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error removing user');
            });
        }
        
        function deleteRoom(event) {
            event.preventDefault();

            if (!confirm('Are you sure you want to delete this room?')) {
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const roomId = '@Model.RoomDetails.Room.Id';

            fetch(`/Room/Delete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `roomId=${roomId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/Room/Index';
                } else {
                    alert(data.message || 'Failed to delete room');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting room');
            });
        }
        
        
        // Drag and drop functionality
        let draggedUserId = null;

            function onUserDragStart(e) {
            draggedUserId = e.target.getAttribute('data-user-id');
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', draggedUserId);
        }

        function onUserDrop(e) {
            e.preventDefault();
            const newGroupId = e.dataTransfer.getData('text/plain');
            const targetBox = e.currentTarget;
            const groupId = targetBox.getAttribute('data-group-id');
            const li = document.querySelector(`li[data-user-id='${draggedUserId}']`);
            const ul = targetBox.querySelector('ul.group-list');
            ul.appendChild(li);

            // Persist change
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                fetch('/Group/MoveUser', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: new URLSearchParams({ userId: draggedUserId, newGroupId: groupId })
        })
            .then(r => r.json())
            .then(data => {
            if (!data.success) {
                alert(data.message || 'Could not move user');
                location.reload();
            }
        })
            .catch(() => {
                alert('Error communicating with server');
                location.reload();
            });
        }
    </script>
}
