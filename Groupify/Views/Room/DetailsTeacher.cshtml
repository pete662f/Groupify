@using Groupify.ViewModels.Group
@model Groupify.ViewModels.Room.CompositeRoomViewModel

@{
    ViewData["Title"] = "Room Details";
}

@* Flash messages from join *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["InfoMessage"] != null)
{
    <div class="alert alert-info">@TempData["InfoMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<div class="row text-center">
    <h2>@Model.RoomDetails.Room.Name</h2>
</div>

<div class="row">
    <div class="col-md-4">
        <h3 class="text-center">Users</h3>
        <ul>
            @foreach (var user in Model.RoomDetails.Room.Users)
            {
                <li>
                    @user.UserName |
                    <button class="btn btn-link btn-sm text-danger p-0 small text-decoration-none"
                            onclick="removeUser('@Model.RoomDetails.Room.Id', '@user.Id', this)">
                        Remove
                    </button>
                </li>
            }
        </ul>
    </div>
    <div class="col-md-4">
        <h3 class="text-center">Create Groups</h3>
        <form id="createGroupsForm" onsubmit="createGroups(event)">
            <input type="hidden" name="CreateGroup.RoomId" value="@Model.RoomDetails.Room.Id" />
            <div class="form-group">
                <label for="groupSize">Group Size</label>
                <input name="CreateGroup.GroupSize" type="number" class="form-control" id="groupSize"/>
                <span class="text-danger" id="createGroupsError"></span>
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </form>
    </div>
    <div class="col-md-4">
        <h3 class="text-center">Groups</h3>
        <ul>
            @foreach (var group in Model.RoomDetails.Groups)
            {
                <li>
                    <a asp-controller="Group" asp-action="Details" asp-route-id="@group.Id">
                        Group @group.GroupNumber
                    </a>
                </li>
                <ul>
                    @foreach (var user in group.Users)
                    {
                        <li>@user.UserName</li>
                    }
                </ul>
            }
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        function createGroups(event) {
            event.preventDefault();

            const form = event.target;
            const errorSpan = document.getElementById('createGroupsError');
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Clear previous errors
            errorSpan.textContent = '';
            
            fetch('/Room/CreateGroups', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams(new FormData(form))
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        console.log(data.errors);
                        console.log(data.message);
                        errorSpan.textContent = data.message || 'Failed to create groups';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    errorSpan.textContent = 'Error creating groups';
                });
        }
        
        function removeUser(roomId, userId, button) {
            if (!confirm('Are you sure you want to remove this user from the room?')) {
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/Room/RemoveUser`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `userId=${userId}&roomId=${roomId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.closest('li').remove();
                } else {
                    alert(data.message || 'Failed to remove user');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error removing user');
            });
        }
    
    </script>
}
